-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GraphQLApi.Mutation exposing (..)

import GraphQLApi.InputObject
import GraphQLApi.Interface
import GraphQLApi.Object
import GraphQLApi.Scalar
import GraphQLApi.ScalarCodecs
import GraphQLApi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias SaveCalendarRequiredArguments =
    { name : String
    , events : List GraphQLApi.InputObject.EventInput
    , blockedDays : List String
    }


saveCalendar :
    SaveCalendarRequiredArguments
    -> SelectionSet decodesTo GraphQLApi.Object.Calendar
    -> SelectionSet decodesTo RootMutation
saveCalendar requiredArgs____ object____ =
    Object.selectionForCompositeField "saveCalendar" [ Argument.required "name" requiredArgs____.name Encode.string, Argument.required "events" requiredArgs____.events (GraphQLApi.InputObject.encodeEventInput |> Encode.list), Argument.required "blockedDays" requiredArgs____.blockedDays (Encode.string |> Encode.list) ] object____ Basics.identity


type alias DeleteCalendarRequiredArguments =
    { name : String }


deleteCalendar :
    DeleteCalendarRequiredArguments
    -> SelectionSet decodesTo GraphQLApi.Object.Calendar
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteCalendar requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteCalendar" [ Argument.required "name" requiredArgs____.name Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias SaveMeetingOptionalArguments =
    { created : OptionalArgument GraphQLApi.ScalarCodecs.Long }


type alias SaveMeetingRequiredArguments =
    { participants : List String
    , title : String
    , duration : Int
    }


saveMeeting :
    (SaveMeetingOptionalArguments -> SaveMeetingOptionalArguments)
    -> SaveMeetingRequiredArguments
    -> SelectionSet decodesTo GraphQLApi.Object.Meeting
    -> SelectionSet decodesTo RootMutation
saveMeeting fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { created = Absent }

        optionalArgs____ =
            [ Argument.optional "created" filledInOptionals____.created (GraphQLApi.ScalarCodecs.codecs |> GraphQLApi.Scalar.unwrapEncoder .codecLong) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "saveMeeting" (optionalArgs____ ++ [ Argument.required "participants" requiredArgs____.participants (Encode.string |> Encode.list), Argument.required "title" requiredArgs____.title Encode.string, Argument.required "duration" requiredArgs____.duration Encode.int ]) object____ Basics.identity


type alias DeleteMeetingRequiredArguments =
    { created : GraphQLApi.ScalarCodecs.Long }


deleteMeeting :
    DeleteMeetingRequiredArguments
    -> SelectionSet decodesTo GraphQLApi.Object.Meeting
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteMeeting requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteMeeting" [ Argument.required "created" requiredArgs____.created (GraphQLApi.ScalarCodecs.codecs |> GraphQLApi.Scalar.unwrapEncoder .codecLong) ] object____ (Basics.identity >> Decode.nullable)


type alias SaveEventsRequiredArguments =
    { events : List GraphQLApi.InputObject.EventInput }


saveEvents :
    SaveEventsRequiredArguments
    -> SelectionSet decodesTo GraphQLApi.Object.Event
    -> SelectionSet (List decodesTo) RootMutation
saveEvents requiredArgs____ object____ =
    Object.selectionForCompositeField "saveEvents" [ Argument.required "events" requiredArgs____.events (GraphQLApi.InputObject.encodeEventInput |> Encode.list) ] object____ (Basics.identity >> Decode.list)


type alias BeginCheckoutRequiredArguments =
    { credits : Int }


beginCheckout :
    BeginCheckoutRequiredArguments
    -> SelectionSet decodesTo GraphQLApi.Object.PaymentIntent
    -> SelectionSet (Maybe decodesTo) RootMutation
beginCheckout requiredArgs____ object____ =
    Object.selectionForCompositeField "beginCheckout" [ Argument.required "credits" requiredArgs____.credits Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias CreditsChangedRequiredArguments =
    { userId : GraphQLApi.ScalarCodecs.Id
    , credits : Int
    }


creditsChanged :
    CreditsChangedRequiredArguments
    -> SelectionSet Int RootMutation
creditsChanged requiredArgs____ =
    Object.selectionForField "Int" "creditsChanged" [ Argument.required "userId" requiredArgs____.userId (GraphQLApi.ScalarCodecs.codecs |> GraphQLApi.Scalar.unwrapEncoder .codecId), Argument.required "credits" requiredArgs____.credits Encode.int ] Decode.int
