-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ZeitplanApi.Mutation exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import ZeitplanApi.InputObject
import ZeitplanApi.Interface
import ZeitplanApi.Object
import ZeitplanApi.Scalar
import ZeitplanApi.ScalarCodecs
import ZeitplanApi.Union


type alias SaveCalendarRequiredArguments =
    { name : String
    , events : List ZeitplanApi.InputObject.EventInput
    , blockedDays : List String
    }


saveCalendar :
    SaveCalendarRequiredArguments
    -> SelectionSet decodesTo ZeitplanApi.Object.Calendar
    -> SelectionSet decodesTo RootMutation
saveCalendar requiredArgs____ object____ =
    Object.selectionForCompositeField "saveCalendar" [ Argument.required "name" requiredArgs____.name Encode.string, Argument.required "events" requiredArgs____.events (ZeitplanApi.InputObject.encodeEventInput |> Encode.list), Argument.required "blockedDays" requiredArgs____.blockedDays (Encode.string |> Encode.list) ] object____ Basics.identity


type alias DeleteCalendarRequiredArguments =
    { name : String }


deleteCalendar :
    DeleteCalendarRequiredArguments
    -> SelectionSet decodesTo ZeitplanApi.Object.Calendar
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteCalendar requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteCalendar" [ Argument.required "name" requiredArgs____.name Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias SaveMeetingOptionalArguments =
    { created : OptionalArgument ZeitplanApi.ScalarCodecs.Long }


type alias SaveMeetingRequiredArguments =
    { participants : List String
    , title : String
    , duration : Int
    }


saveMeeting :
    (SaveMeetingOptionalArguments -> SaveMeetingOptionalArguments)
    -> SaveMeetingRequiredArguments
    -> SelectionSet decodesTo ZeitplanApi.Object.Meeting
    -> SelectionSet decodesTo RootMutation
saveMeeting fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { created = Absent }

        optionalArgs____ =
            [ Argument.optional "created" filledInOptionals____.created (ZeitplanApi.ScalarCodecs.codecs |> ZeitplanApi.Scalar.unwrapEncoder .codecLong) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "saveMeeting" (optionalArgs____ ++ [ Argument.required "participants" requiredArgs____.participants (Encode.string |> Encode.list), Argument.required "title" requiredArgs____.title Encode.string, Argument.required "duration" requiredArgs____.duration Encode.int ]) object____ Basics.identity


type alias DeleteMeetingRequiredArguments =
    { created : ZeitplanApi.ScalarCodecs.Long }


deleteMeeting :
    DeleteMeetingRequiredArguments
    -> SelectionSet decodesTo ZeitplanApi.Object.Meeting
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteMeeting requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteMeeting" [ Argument.required "created" requiredArgs____.created (ZeitplanApi.ScalarCodecs.codecs |> ZeitplanApi.Scalar.unwrapEncoder .codecLong) ] object____ (Basics.identity >> Decode.nullable)


type alias SaveEventsRequiredArguments =
    { events : List ZeitplanApi.InputObject.EventInput }


saveEvents :
    SaveEventsRequiredArguments
    -> SelectionSet decodesTo ZeitplanApi.Object.Event
    -> SelectionSet (List decodesTo) RootMutation
saveEvents requiredArgs____ object____ =
    Object.selectionForCompositeField "saveEvents" [ Argument.required "events" requiredArgs____.events (ZeitplanApi.InputObject.encodeEventInput |> Encode.list) ] object____ (Basics.identity >> Decode.list)


type alias BeginCheckoutRequiredArguments =
    { credits : Int }


beginCheckout :
    BeginCheckoutRequiredArguments
    -> SelectionSet decodesTo ZeitplanApi.Object.PaymentIntent
    -> SelectionSet decodesTo RootMutation
beginCheckout requiredArgs____ object____ =
    Object.selectionForCompositeField "beginCheckout" [ Argument.required "credits" requiredArgs____.credits Encode.int ] object____ Basics.identity


type alias UpdateCheckoutRequiredArguments =
    { credits : Int
    , orderId : ZeitplanApi.ScalarCodecs.Id
    }


updateCheckout :
    UpdateCheckoutRequiredArguments
    -> SelectionSet decodesTo ZeitplanApi.Object.PaymentUpdate
    -> SelectionSet decodesTo RootMutation
updateCheckout requiredArgs____ object____ =
    Object.selectionForCompositeField "updateCheckout" [ Argument.required "credits" requiredArgs____.credits Encode.int, Argument.required "orderId" requiredArgs____.orderId (ZeitplanApi.ScalarCodecs.codecs |> ZeitplanApi.Scalar.unwrapEncoder .codecId) ] object____ Basics.identity


type alias DeleteCheckoutRequiredArguments =
    { orderId : ZeitplanApi.ScalarCodecs.Id }


deleteCheckout :
    DeleteCheckoutRequiredArguments
    -> SelectionSet decodesTo ZeitplanApi.Object.StatusResponse
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteCheckout requiredArgs____ object____ =
    Object.selectionForCompositeField "deleteCheckout" [ Argument.required "orderId" requiredArgs____.orderId (ZeitplanApi.ScalarCodecs.codecs |> ZeitplanApi.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias ComputeScheduleRequiredArguments =
    { credits : Int }


computeSchedule :
    ComputeScheduleRequiredArguments
    -> SelectionSet decodesTo ZeitplanApi.Object.ScheduleResponse
    -> SelectionSet decodesTo RootMutation
computeSchedule requiredArgs____ object____ =
    Object.selectionForCompositeField "computeSchedule" [ Argument.required "credits" requiredArgs____.credits Encode.int ] object____ Basics.identity


type alias CreditsChangedRequiredArguments =
    { userId : ZeitplanApi.ScalarCodecs.Id
    , credits : Int
    }


creditsChanged :
    CreditsChangedRequiredArguments
    -> SelectionSet Int RootMutation
creditsChanged requiredArgs____ =
    Object.selectionForField "Int" "creditsChanged" [ Argument.required "userId" requiredArgs____.userId (ZeitplanApi.ScalarCodecs.codecs |> ZeitplanApi.Scalar.unwrapEncoder .codecId), Argument.required "credits" requiredArgs____.credits Encode.int ] Decode.int
