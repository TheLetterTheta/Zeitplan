-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ZeitplanApi.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import ZeitplanApi.InputObject
import ZeitplanApi.Interface
import ZeitplanApi.Object
import ZeitplanApi.Scalar
import ZeitplanApi.ScalarCodecs
import ZeitplanApi.Union


calendars :
    SelectionSet decodesTo ZeitplanApi.Object.Calendar
    -> SelectionSet (List decodesTo) RootQuery
calendars object____ =
    Object.selectionForCompositeField "calendars" [] object____ (Basics.identity >> Decode.list)


meetings :
    SelectionSet decodesTo ZeitplanApi.Object.Meeting
    -> SelectionSet (List decodesTo) RootQuery
meetings object____ =
    Object.selectionForCompositeField "meetings" [] object____ (Basics.identity >> Decode.list)


user :
    SelectionSet decodesTo ZeitplanApi.Object.User
    -> SelectionSet decodesTo RootQuery
user object____ =
    Object.selectionForCompositeField "user" [] object____ Basics.identity


type alias SchedulesOptionalArguments =
    { nextToken : OptionalArgument String }


type alias SchedulesRequiredArguments =
    { limit : Int }


schedules :
    (SchedulesOptionalArguments -> SchedulesOptionalArguments)
    -> SchedulesRequiredArguments
    -> SelectionSet decodesTo ZeitplanApi.Object.Schedules
    -> SelectionSet (Maybe decodesTo) RootQuery
schedules fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { nextToken = Absent }

        optionalArgs____ =
            [ Argument.optional "nextToken" filledInOptionals____.nextToken Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "schedules" (optionalArgs____ ++ [ Argument.required "limit" requiredArgs____.limit Encode.int ]) object____ (Basics.identity >> Decode.nullable)
